{"version":3,"sources":["components/ReferenceItem.js","components/Reference.js","components/SelectItem.js","components/SelectList.js","App.js","serviceWorker.js","index.js"],"names":["ReferenceItem","item","onClick","index","station","visible","selected","className","cn","Reference","items","map","SelectItem","isTarget","revealed","SelectList","App","stations","useState","state","setState","timeout","setTimeout","result","setResult","useEffect","interval","setInterval","onTimeOut","clearInterval","shuffle","target","i","length","j","Math","floor","random","failCnt","useRef","reference","setReference","find","selections","setSelections","sort","a","b","selection","onConfirm","useCallback","currentTargetIndex","findIndex","current","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ce6d02d.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport './ReferenceItem.scss';\n\nconst ReferenceItem = ({ item, onClick }) => {\n  const { index, station, visible, selected } = item;\n\n  return (\n    <div\n      className={cn('ReferenceItem', { selected })}\n      onClick={() => onClick(item)}\n    >\n      {visible && <div className=\"number\">{index + 1}</div>}\n      <div className=\"station\">{station}</div>\n    </div>\n  );\n};\n\nexport default ReferenceItem;\n","import React from 'react';\nimport ReferenceItem from './ReferenceItem';\nimport './Reference.scss'\n\nconst Reference = ({ items, onClick }) => {\n  return (\n    <div className=\"Reference\">\n      {items.map(item => (\n        <ReferenceItem item={item} onClick={onClick} />\n      ))}\n    </div>\n  );\n};\n\nexport default Reference;\n","import React from 'react';\nimport './SelectItem.scss';\nimport cn from 'classnames';\n\nconst SelectItem = ({ item }) => {\n  const { index, station, visible, isTarget, revealed } = item;\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <div className={cn('selectItem', { isTarget, revealed })}>\n      <div className=\"number\">{index + 1}</div>\n      {revealed && <div className=\"station\">{station}</div>}\n    </div>\n  );\n};\n\nexport default SelectItem;\n","import React from 'react';\nimport './SelectList.scss'\nimport SelectItem from './SelectItem';\n\nconst SelectList = ({ items }) => {\n  return (\n    <div className='SelectList'>\n      {items.map(item => (\n        <SelectItem item={item} />\n      ))}\n    </div>\n  );\n};\n\nexport default SelectList;","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./App.scss\";\nimport Reference from \"./components/Reference\";\nimport SelectList from \"./components/SelectList\";\n\nconst App = () => {\n  const stations = [\n    \"공항\",\n    \"국회의사당\",\n    \"미술관\",\n    \"박물관\",\n    \"놀이공원\",\n    \"고속터미널\",\n    \"문화회관\",\n    \"영화관\",\n    \"시청\",\n    \"극장\",\n    \"법원\",\n    \"동물원\"\n  ];\n\n  const [state, setState] = useState(\"\");\n  const [timeout, setTimeout] = useState(30);\n  const [result, setResult] = useState(\"\");\n\n  useEffect(() => {\n    const timer = () => {\n      if (timeout <= 0) {\n        onTimeOut();\n        clearInterval(interval);\n      } else {\n        setTimeout(timeout => timeout - 1);\n      }\n    };\n    const interval = setInterval(timer, 1000);\n    return () => clearInterval(interval);\n  }, [timeout]);\n\n  const shuffle = target => {\n    for (let i = target.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [target[i], target[j]] = [target[j], target[i]];\n    }\n    return target;\n  };\n\n  const failCnt = useRef(0);\n\n  const [reference, setReference] = useState(\n    shuffle(stations).map((station, index) => {\n      const item = {\n        index: index,\n        station: station,\n        visible: true,\n        selected: false\n      };\n      return item;\n    })\n  );\n\n  const [selections, setSelections] = useState(\n    shuffle(stations).map(station => {\n      const item = {\n        index: reference.find(reference => {\n          return reference.station === station;\n        }).index,\n        station: station,\n        visible: false,\n        isTarget: false,\n        revealed: false\n      };\n      return item;\n    })\n  );\n\n  const onTimeOut = () => {\n    setState(\"start\");\n    setTimeout(0);\n    clearInterval();\n    setReference(\n      reference\n        .sort((a, b) => {\n          return a.station < b.station ? -1 : a.station > b.station ? 1 : 0;\n        })\n        .map(reference => {\n          return { ...reference, visible: false };\n        })\n    );\n    setSelections(\n      selections.map((selection, index) => {\n        return { ...selection, isTarget: index === 0, visible: true };\n      })\n    );\n  };\n\n  const onConfirm = useCallback(item => {\n    if (state !== \"start\") {\n      return;\n    }\n\n    const target = selections.find(selection => {\n      return selection.isTarget;\n    });\n\n    const result = item.index === target.index;\n    setResult(result ? \"correct\" : \"wrong\");\n    if (result) {\n      const currentTargetIndex = selections.findIndex(selection => {\n        return selection.isTarget;\n      });\n\n      if (currentTargetIndex === selections.length - 1) {\n        setState(\"end\");\n        setResult(failCnt.current);\n      }\n\n      setSelections(\n        selections.map((selection, index) => {\n          if (selection.isTarget) {\n            return { ...selection, revealed: true, isTarget: false };\n          } else {\n            return {\n              ...selection,\n              isTarget: index === currentTargetIndex + 1\n            };\n          }\n        })\n      );\n    } else {\n      failCnt.current++;\n    }\n  });\n\n  return (\n    <>\n      <div className=\"GamePlate\">\n        <Reference items={reference} onClick={onConfirm} />\n        <SelectList items={selections} />\n      </div>\n      <div className=\"Submit\">\n        {timeout > 0 && (\n          <button className=\"over\" onClick={onTimeOut}>\n            {timeout}\n          </button>\n        )}\n        <text className=\"result\">{result}</text>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}